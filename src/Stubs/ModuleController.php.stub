<?php

namespace App\Http\Controllers\{{type}};


use App\Services\Simple\Category\CategoryService;
use O360Main\SaasBridge\Contracts\ControllerInterface;
use O360Main\SaasBridge\Http\Requests\ConfigRequest;
use O360Main\SaasBridge\Http\Requests\DataRequest;
use O360Main\SaasBridge\Http\Requests\ExportRequest;
use O360Main\SaasBridge\Http\Requests\ImportRequest;
use O360Main\SaasBridge\Http\Requests\TriggerRequest;
use O360Main\SaasBridge\Http\Responses\ConfigResponse;
use O360Main\SaasBridge\Http\Responses\DataResponse;
use O360Main\SaasBridge\Http\Responses\ExportResponse;
use O360Main\SaasBridge\Http\Responses\ImportResponse;
use O360Main\SaasBridge\Http\Responses\TriggerResponse;
use O360Main\SaasBridge\ModuleAction;
use O360Main\SaasBridge\ModuleEvent;
use O360Main\SaasBridge\Config\FormField;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Exception;


class {{Modules}}Controller implements ControllerInterface
{

    public function data(DataRequest $request): DataResponse
    {
        return new DataResponse(
        //.. will added more in future
        );
    }


    public function config(ConfigRequest $request): ConfigResponse
    {
        return new ConfigResponse(
            available: true,
            webhook: false,
            //.. will added more in future

            form_fields: [
                FormField::select(
                    name: 'test',
                    label: 'Test',
                    options: [
                        ['label' => 'Test', 'value' => 'test'],
                        ['label' => 'Test 2', 'value' => 'test2'],
                    ],
                    default_value: 'test',
                    index: 1,
                    required: true,
                    multiple: true,
                ),
            ],
        );
    }

    public function import(ImportRequest $request): ImportResponse
    {
        //If webhook = false
        throw new NotFoundHttpException('Feature not found');
    }

    /**
     * @throws \Exception
     */
    public function export(ExportRequest $request): ExportResponse
    {
        ${{module}}Service = new {{Module}}Service();

          return match ($request->event()) {
              //if event is created or updated
              ModuleEvent::created, ModuleEvent::updated => ${{module}}Service->export($request),

              //if event is deleted
              ModuleEvent::deleted => throw new Exception('Not implemented'),

              //in case of any other event
              default => throw new NotFoundHttpException('Event not found')
          };
      }


    /**
     * @throws \Exception
     */
    public function trigger(TriggerRequest $request): TriggerResponse // return this function
    {
        ${{module}}Service = new {{Module}}Service();

          return match ($request->action()) {
              //if action is import_all
              ModuleAction::import_all => ${{module}}Service->importAllForTrigger($request),

              default => throw new NotFoundHttpException('Action not found')
          };
      }

}
